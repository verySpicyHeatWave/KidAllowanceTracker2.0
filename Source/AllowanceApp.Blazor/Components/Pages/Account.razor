@page "/account"

<PageTitle>What up</PageTitle>

<h1>Account</h1>

<div class="card">
    <!-- Account header -->
    <div class="text-center">
        <h2 class="card-title">Account Name</h2>
        <p class="card-subtitle">Allowance: <span class="balance">$@Allowance</span></p>
    </div>
    <!-- Point buttons -->
    <div class="grid grid-cols-4 gap-4">
        <div>
            <button class="btn-allowance" @onclick="() => IncrementPoint(nameof(Chores))">
                <img src="/images/chores.png" alt="Chores icon" class="justify-center">
            </button>
            <p class="point-balance">Chores: @Chores</p>
        </div>
        <div>
            <button class="btn-allowance" @onclick="() => IncrementPoint(nameof(Homework))">
                <img src="/images/homework.png" alt="Homework icon">
            </button>
            <p class="point-balance">Homework: @Homework</p>
        </div>
        <div>
            <button class="btn-allowance" @onclick="() => IncrementPoint(nameof(GoodBehavior))">
                <img src="/images/goodbehavior.png" alt="Good behavior icon">
            </button>
            <p class="point-balance">Good: @GoodBehavior</p>
        </div>
        <div>
            <button class="btn-allowance" @onclick="() => IncrementPoint(nameof(BadBehavior))">
                <img src="/images/badbehavior.png" alt="Bad behavior icon">
            </button>
            <p class="point-balance">Bad: @BadBehavior</p>
        </div>
    </div>
    <div class="grid grid-cols-5">
        <button class="btn-allowance col-span-full" @onclick="OpenModal" >
            Add Your Report Card
        </button>
        <p class="point-balance">@GradeStrings['A']</p>
        <p class="point-balance">@GradeStrings['B']</p>
        <p class="point-balance">@GradeStrings['C']</p>
        <p class="point-balance">@GradeStrings['D']</p>
        <p class="point-balance">@GradeStrings['F']</p>
    </div>

    <button class="btn-allowance text-2xl" @onclick="PayoutAllowance">
        Pay Out Allowance
    </button>
</div>

<Modal @ref="MyModal"
    Title="Enter Your Grades"
    OnConfirm="HandleConfirm"
    OnCancel="HandleCancel">
    <div>
        <GradeInput Grade="A" @bind-Value="Grades['A']" />
        <GradeInput Grade="B" @bind-Value="Grades['B']" />
        <GradeInput Grade="C" @bind-Value="Grades['C']" />
        <GradeInput Grade="D" @bind-Value="Grades['D']" />
        <GradeInput Grade="F" @bind-Value="Grades['F']" />
    </div>
</Modal>

@code {
    private Random rng = new((int)DateTime.Now.ToOADate());
    private Modal? MyModal;
    public int Allowance {get; set;} = 0;
    public int Chores {get; set;} = 0;
    public int GoodBehavior {get; set;} = 0;
    public int BadBehavior {get; set;} = 0;
    public int Homework {get; set;} = 0;
    public Dictionary<char, int> Grades = new()
        {
            ['A'] = 0,
            ['B'] = 0,
            ['C'] = 0,
            ['D'] = 0,
            ['F'] = 0
        };
    public Dictionary<char, string> GradeStrings = new()
        {
            ['A'] = "",
            ['B'] = "",
            ['C'] = "No Grades",
            ['D'] = "",
            ['F'] = ""
        };
    private void SetGrades(bool clear = false)
    {
        if (clear)
        {        
            foreach (char key in Grades.Keys) { Grades[key] = 0; }
        }
        else
        {
            int next = rng.Next(65, 71);
            if (next == 69) {next = 65;}
            Grades[(char)next]++;
        }
        UpdateGradeStrings();
    }

    private void UpdateGradeStrings()
    {
        int total = Grades.Sum(v => v.Value);
        if (total > 0) 
        {
            foreach (char key in Grades.Keys)
            {
                GradeStrings[key] = $"{key}: {Grades[key]}";
            }
        } 
        else
        {
            foreach (char key in Grades.Keys)
            {
                GradeStrings[key] = "";
                if (key == 'C') {GradeStrings[key] = "No Grades";}
            }
        }
    }
    private void IncrementPoint(string valueName)
    {
        switch (valueName)
        {
            case nameof(Chores):
                Chores++;
                Allowance++;
                break;
            case nameof(GoodBehavior):
                GoodBehavior++;
                Allowance++;
                break;
            case nameof(BadBehavior):
                BadBehavior++;
                Allowance--;
                break;
            case nameof(Homework):
                Homework++;
                Allowance++;
                break;
        }
        Allowance = Math.Max(0, Allowance);
    }

    private void PayoutAllowance()
    {
        Allowance = 0;
        Homework = 0;
        BadBehavior = 0;
        GoodBehavior = 0;
        Chores = 0;

        SetGrades(true);
    }    
    
    private void OpenModal()
    {
        MyModal?.Show();
    }

    private void HandleConfirm()
    {
        UpdateGradeStrings();
        @* Console.WriteLine("Confirmed!");
        foreach (var pair in Grades)
        {
            Console.WriteLine($"{pair.Key}: {pair.Value}");
        } *@
    }

    private void HandleCancel()
    {
        SetGrades(true);
        @* Console.WriteLine("Cancelled!");
        foreach (var pair in Grades)
        {
            Console.WriteLine($"{pair.Key}: {pair.Value}");
        } *@
    }
}

