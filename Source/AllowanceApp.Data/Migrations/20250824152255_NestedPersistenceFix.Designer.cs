// <auto-generated />
using System;
using AllowanceApp.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AllowanceApp.Data.Migrations
{
    [DbContext(typeof(AccountContext))]
    [Migration("20250824152255_NestedPersistenceFix")]
    partial class NestedPersistenceFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("AllowanceApp.Core.Models.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Balance")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.AllowanceData", b =>
                {
                    b.Property<int>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("BasePay")
                        .HasColumnType("REAL");

                    b.Property<DateOnly>("LastPayout")
                        .HasColumnType("TEXT");

                    b.HasKey("AccountID");

                    b.ToTable("Allowances");
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.PointType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("Category", "Price")
                        .IsUnique();

                    b.ToTable("PointObjects");
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.AllowanceData", b =>
                {
                    b.HasOne("AllowanceApp.Core.Models.Account", null)
                        .WithOne("Allowance")
                        .HasForeignKey("AllowanceApp.Core.Models.AllowanceData", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.PointType", b =>
                {
                    b.HasOne("AllowanceApp.Core.Models.AllowanceData", null)
                        .WithMany("PayList")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.Transaction", b =>
                {
                    b.HasOne("AllowanceApp.Core.Models.Account", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.Account", b =>
                {
                    b.Navigation("Allowance")
                        .IsRequired();

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.AllowanceData", b =>
                {
                    b.Navigation("PayList");
                });
#pragma warning restore 612, 618
        }
    }
}
