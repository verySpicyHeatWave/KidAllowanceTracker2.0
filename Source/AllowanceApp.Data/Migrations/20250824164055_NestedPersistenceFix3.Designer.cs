// <auto-generated />
using System;
using AllowanceApp.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AllowanceApp.Data.Migrations
{
    [DbContext(typeof(AccountContext))]
    [Migration("20250824164055_NestedPersistenceFix3")]
    partial class NestedPersistenceFix3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("AllowanceApp.Core.Models.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Balance")
                        .HasColumnType("REAL");

                    b.Property<double>("BaseAllowance")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AccountID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AccountDetails");
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.AllowancePoint", b =>
                {
                    b.Property<int>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("AccountID", "Category");

                    b.ToTable("AllowancePoints");
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.Transaction", b =>
                {
                    b.Property<int>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("AccountID", "TransactionID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.AllowancePoint", b =>
                {
                    b.HasOne("AllowanceApp.Core.Models.Account", null)
                        .WithMany("Allowances")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.Transaction", b =>
                {
                    b.HasOne("AllowanceApp.Core.Models.Account", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AllowanceApp.Core.Models.Account", b =>
                {
                    b.Navigation("Allowances");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
